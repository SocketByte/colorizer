// Code generated by go-bindata.
// sources:
// views/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x6f\x53\xdb\xb8\x13\x7e\xdf\x99\x7e\x07\x55\x33\x0c\x74\x7e\x4d\xc4\xdf\x96\x9f\x63\x7b\x06\xb8\x40\xcb\x95\xc2\x01\xbd\x52\x3a\xf7\x42\xb1\x15\x5b\x20\x4b\x46\x5a\x43\x72\x19\x7f\xf7\x1b\x29\x76\x08\xc6\x61\xd2\xce\xcd\xf9\x05\x46\xab\xd5\xb3\xfb\xac\x1e\xad\x1c\xff\xcd\x6f\xa7\x07\x97\xdf\xcf\xfa\x28\x85\x4c\x84\xaf\x5f\xf9\xf6\x8d\x04\x95\x49\x80\x99\xc4\xce\xc2\x68\x1c\xbe\x7e\x85\x10\x42\x7e\xc6\x80\xa2\x28\xa5\xda\x30\x08\xf0\xd7\xcb\xc3\xce\x2e\xae\xe7\x80\x83\x60\xe1\xa5\xfd\xeb\x93\xe9\xe0\xf5\xab\x6a\x4e\x70\x79\x8b\x34\x13\x01\x36\x30\x16\xcc\xa4\x8c\x01\x46\xa9\x66\xc3\x00\xa7\x00\xb9\xf1\x08\x31\x40\xa3\xdb\x9c\x42\xda\x1d\x28\x05\x06\x34\xcd\xa3\x58\x76\x23\x95\x91\x99\x81\x6c\x77\x37\xba\x5b\x24\x32\xe6\xd1\xd6\xcd\xb8\xec\x46\xc6\x60\xc4\x25\xb0\x44\x73\x18\x07\xd8\xa4\x74\x6b\x77\xbb\x73\x72\xf0\xf0\xff\x5d\x72\x71\x28\x8f\xfa\xbb\xc3\xe3\xcb\xad\xa3\xab\x87\xfe\xa9\x4c\xcc\x9f\x1f\xae\x61\xf3\xc3\x97\xab\x43\x45\xd5\x5e\x9e\x7d\xcf\x76\x37\x78\x71\xa5\xce\x6e\x0f\x4f\x8f\x1f\x8e\x77\xfb\xe7\xf1\xad\xfc\x7c\x76\x72\x8a\x51\xa4\x95\x31\x4a\xf3\x84\xcb\x00\x53\xa9\xe4\x38\x53\x85\x99\x91\x36\x91\xe6\x39\x20\xa3\xa3\x5f\x22\x72\xd3\xe4\x71\xd3\x4a\xe3\x20\x1d\xde\xdd\x8d\x8a\xeb\xaf\x07\xf2\xf8\xe2\xf7\xad\xff\x9d\x5c\x65\x67\x5f\x3e\x8d\xfb\xef\xaf\x07\xdf\xd2\xcd\x4f\x27\x77\xfd\xcd\xed\x0d\xfd\x9d\xdf\x1d\x8f\xc6\x27\xfc\xfa\xfd\xe9\x37\x72\x9c\x5d\xff\xb1\x63\xe0\xa1\xff\xf5\xf3\xe5\x78\x31\x0d\x9f\x4c\x19\xbc\xc4\x27\x8a\xe5\x8d\xe9\x46\x42\x15\xf1\x50\x50\xcd\x1c\x13\x7a\x43\x47\x44\xf0\x81\x21\x07\x29\xd5\xd0\xbd\x31\x64\xb3\xbb\xdd\x5d\xaf\x86\x15\x97\x79\x7c\x9f\x54\x4a\xf2\x07\x2a\x1e\x3b\x6d\xf8\x31\xbf\x47\x91\xa0\xc6\x04\x38\x52\x12\x28\x97\x4c\xa3\x0c\x3a\x3b\xb3\x02\xa7\x1b\xb5\x43\xcc\x4d\x2e\xe8\xb8\xb3\x81\x80\x8d\xa0\x13\x31\x09\x4c\xe3\xf0\x40\x09\xa5\xf9\xdf\x4c\xfb\x24\xdd\x78\x54\x5c\x1b\x32\x46\x54\xf0\x44\x06\xb8\x5a\x8b\x9c\x18\x03\xfc\xc0\x63\x48\x3d\xf4\x7e\x67\xa5\x97\x51\x9d\x70\xd9\x01\x95\x7b\x68\x67\x3d\x1f\xd5\x06\xc1\x86\xe0\xa1\xcd\x9d\x95\x3a\x31\x17\x64\xa8\x74\x86\x98\x8c\x60\x9c\xb3\x00\x67\x85\x00\x9e\x53\x0d\xc4\xda\x3b\x31\x05\x8a\xeb\x1c\x9c\x85\x4b\xc1\x25\xc3\x88\x46\xc0\x95\x0c\x70\x91\x0b\x45\x63\x8c\x32\x06\xa9\x8a\x03\x7c\x76\x7a\x71\x39\x8f\xdf\x24\xe2\x40\x12\xad\x8a\xbc\xe9\xe5\x3c\xb9\xcc\x0b\x40\xd3\x5c\x86\x5c\xb0\x59\xf0\x01\x48\x34\x00\xd9\xc9\x35\xcf\xa8\x1e\x63\x24\x69\xc6\xe6\xc2\xbb\xbc\x05\x23\xcd\xd0\x24\xe6\xf7\x4d\xdb\xa0\x00\x50\xb2\x8a\x62\x8a\x41\xc6\xe1\x59\x9c\x98\xca\xc4\xee\xa3\xe8\x6c\xe3\xf0\x88\x01\xd2\xcc\x14\x02\xcc\x1b\x9f\x4c\x97\xcf\xd7\xd0\x15\xab\xde\xed\x2a\xe2\x74\x34\x59\x41\x7c\x58\xad\x45\x2b\xe5\x0b\x1b\xfb\x44\x32\x33\xaf\x6a\x77\x2b\xdd\x78\x68\x28\xd8\xa8\x87\x6e\x0a\x03\x7c\x38\xee\xd8\xc5\x4c\x82\x87\xa6\x62\xe8\x3d\x2b\x3c\xcf\x12\x44\x05\x04\xd8\xd0\x2c\xb7\xd5\x74\x32\x09\xf0\xce\xfa\x3a\x46\x29\xe3\x49\x0a\x01\xde\xb2\x03\x77\x5a\xba\x64\x5a\x4f\x43\x26\x13\x5b\xfd\xb2\x7c\x92\x50\xa3\x96\x3e\xd0\x81\x60\x35\x91\xe9\xa0\x49\x62\xea\x67\x0f\xcd\xcc\xcf\x0e\x3a\xc2\x86\x7e\xee\xa8\xdb\x34\x01\x29\x32\x91\xb2\x7b\x15\x29\x51\x1d\x16\x9f\x40\xba\x84\xef\xf9\xd1\xfe\xde\x92\xae\x1f\xd9\x68\x49\xcf\x33\xa6\x6d\xbd\x69\xc2\x5a\x16\xf8\xe4\x19\x09\xeb\xf5\x78\xff\x3c\xa2\x56\x2d\x64\xde\x38\x59\x41\x43\xa5\x51\x4e\xb9\x46\x5c\xba\xb7\x99\xc9\x66\xe9\x32\x69\xf5\x80\xc3\x27\xfa\x19\xd0\xe8\xd6\x1e\x3a\x19\x77\x22\x5b\x3e\x0f\x4d\x26\x16\xbc\x7b\xc6\x47\x4c\x74\x2f\xd5\x47\x36\x2a\xcb\x5e\xd5\x44\xb6\x6c\xd3\x98\xaa\xa3\x1a\x0c\x94\x8e\x99\xee\x38\x34\x0f\x19\x25\x78\x5c\xdb\xaa\x35\x1b\xf9\xc8\x76\x4a\xab\x90\x85\x65\x8c\x43\xdf\x64\x54\x88\x3a\xab\x2a\x15\xcd\xe2\x1e\x0e\xcf\x3d\x9f\xb8\xd9\xf0\x69\x6e\xe7\x65\xf9\xee\x39\x98\x03\x6c\x03\x4b\x34\x63\xb2\x87\xc3\xa3\x05\x70\x47\x3f\x07\x37\x10\x05\xeb\xe1\x70\x7f\x01\xda\xfe\xcf\xa2\xd1\xe8\xb6\x87\xc3\xbd\x05\x70\x7b\x65\xe9\x13\x68\x2a\xa5\x2e\x5e\xdb\x96\x2d\xe1\x3e\x53\x6b\x59\xae\x54\x69\x85\x6b\xd5\xe4\x5e\xa6\x0a\x09\x65\xf9\xb6\xce\xa7\x05\xaf\x45\xd1\x93\x15\xc4\x64\x6c\x95\xfa\x4c\x9b\xa4\x29\x6b\x9f\xb8\xce\x30\x6f\x89\xa8\xbc\xa7\x06\xf1\x38\xc0\xf6\x82\x71\xb7\xed\xac\x01\xbb\x0e\x52\xf7\xa9\x0f\xcd\x3e\x15\xfa\x64\xba\x7a\x1e\xef\xc9\xf5\x5f\x3f\x91\x92\x06\x50\x04\x23\x14\xa0\x58\x45\x45\xc6\x24\x74\x13\x06\x7d\xc1\xec\xbf\xfb\xe3\x4f\xf1\xda\xea\x2c\xfc\xea\x5b\x3b\x77\x60\xfb\xe9\x08\xd6\x56\x37\xe3\xd5\xb7\xbd\xa7\x78\xf7\x54\xbb\xaf\x46\x40\x01\x92\xec\x01\xb9\x65\x6b\x11\x8c\xde\xa1\xc9\xf3\x0d\xb0\x77\x8b\x87\x56\x73\xce\x56\x5b\x04\x62\xc3\x7a\x6d\xcb\xea\x49\xc3\xc0\x78\x3f\x16\x38\xd8\x07\x0b\x3a\x60\x02\x7b\xd8\x75\xc3\x69\x32\x78\x81\x14\x9d\xbf\xbb\xc9\xbd\x1f\x8b\x3d\xec\x43\xc8\x52\x0d\xa8\x35\x40\x43\x51\x2f\x25\x33\x0b\xb5\x40\x44\xf3\xcf\x5f\x2f\x91\x7a\x6c\x6b\xae\x0c\xff\x05\xbf\xfa\xf4\x9d\x1f\xed\x5f\x80\xe6\x32\xf9\x17\xa9\xb6\x4f\x95\xb6\x04\xed\x53\x4e\x04\xc6\x43\x2f\xd0\xfe\x45\xca\x4d\xba\xae\xd9\xbc\x44\x74\x19\x92\x2d\x04\xcb\x56\x6e\x2a\xb7\x1f\x97\xc6\x43\x93\x06\x52\x39\x7f\x2a\x9b\xdf\xfd\x73\x9f\x27\xd3\x5c\xf8\xd0\xa5\x52\x4f\xf8\xa4\x6a\x4d\x3e\x71\xbf\x14\xff\x09\x00\x00\xff\xff\x84\x59\xec\xf6\x39\x0e\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 3641, mode: os.FileMode(438), modTime: time.Unix(1545584799, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/index.html": viewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
